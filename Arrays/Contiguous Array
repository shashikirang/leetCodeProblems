Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

 

Example 1:

Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.
Example 2:

Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
Example 3:

Input: nums = [0,1,1,1,1,1,0,0,0]
Output: 6
Explanation: [1,1,1,0,0,0] is the longest contiguous subarray with equal number of 0 and 1.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.



#include <vector>
#include <unordered_map>
using namespace std;

int findMaxLength(vector<int>& nums) {
    unordered_map<int, int> sumIndex;
    sumIndex[0] = -1; // Handle case where sum is zero from start
    int maxLen = 0, sum = 0;

    for (int i = 0; i < nums.size(); ++i) {
        // Treat 0 as -1
        sum += (nums[i] == 0) ? -1 : 1;

        if (sumIndex.find(sum) != sumIndex.end()) {
            maxLen = max(maxLen, i - sumIndex[sum]);
        } else {
            sumIndex[sum] = i;
        }
    }

    return maxLen;
}
