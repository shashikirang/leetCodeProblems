Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that:

nums[i] == nums[j], and
abs(i - j) <= k

Input: nums = [1, 2, 3, 1], k = 3
Output: true  # nums[0] == nums[3] and abs(0 - 3) = 3 â‰¤ k

Input: nums = [1, 0, 1, 1], k = 1
Output: true  # nums[2] == nums[3] and abs(2 - 3) = 1

Input: nums = [1, 2, 3, 1, 2, 3], k = 2
Output: false  # duplicates exist but not within distance k

#include <vector>
#include <unordered_map>

using namespace std;

bool containsNearbyDuplicate(vector<int>& nums, int k) {
    unordered_map<int, int> indexMap;  // Stores the last index of each number

    for (int i = 0; i < nums.size(); i++) {
        if (indexMap.find(nums[i]) != indexMap.end() && (i - indexMap[nums[i]]) <= k) {
            return true;  // Found a duplicate within range k
        }
        indexMap[nums[i]] = i;  // Update last index of nums[i]
    }
    
    return false;  // No valid duplicates found
}
