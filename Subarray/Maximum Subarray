Given an integer array nums, find the subarray with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

Kadane's algorithm : O(N) 
===========================================
#include <iostream>
#include<vector>
using namespace std;

class solution {
 public:   
    int maxSubArray(vector<int>& nums) 
    {
        //To find maximum sum possible 
        int max_so_far = 0; 
        
        //To store the maximum found at a position
        int cur_max = nums[0];
        
        for ( int i =0; i<nums.size(); i++) 
        {
            cur_max = max(nums[i], (cur_max + nums[i]));
            
            max_so_far = max(cur_max, max_so_far);
        }
        
        return max_so_far;
    }
    
};

int main() {
    
    vector<int> vec = {-2, -5, 6, -2, -3, 1, 5, -6};
    for (auto it : vec) {
        cout << it << endl;
    }
    solution sol;
    cout << "MaxSubArray :" << sol.maxSubArray(vec) << endl;
    
    return 1; 
}
Time Complexity : O(N)
Space Complexity: O(1)
==============================================================================================


Return both max_sum and subarray 

#include <iostream>
#include <vector>
using namespace std;

pair<int, vector<int>> maxSubArray(vector<int>& nums) {
    int maxSum = nums[0];
    int currentSum = nums[0];
    int start = 0, end = 0, tempStart = 0;

    for (int i = 1; i < nums.size(); i++) {
        if (currentSum + nums[i] < nums[i]) {
            currentSum = nums[i];
            tempStart = i;
        } else {
            currentSum += nums[i];
        }

        if (currentSum > maxSum) {
            maxSum = currentSum;
            start = tempStart;
            end = i;
        }
    }

    vector<int> subarray(nums.begin() + start, nums.begin() + end + 1);
    return {maxSum, subarray};
}

Time COmplexity: O(N)
Space Complexity: O(K) 

=================================================================================================== 

Divide and Conquer 

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int maxCrossingSum(vector<int>& nums, int left, int mid, int right) {
    int leftSum = INT_MIN, rightSum = INT_MIN;
    int sum = 0;

    // Left of mid
    for (int i = mid; i >= left; i--) {
        sum += nums[i];
        leftSum = max(leftSum, sum);
    }

    sum = 0;
    // Right of mid
    for (int i = mid + 1; i <= right; i++) {
        sum += nums[i];
        rightSum = max(rightSum, sum);
    }

    return leftSum + rightSum;
}

int maxSubArrayDivide(vector<int>& nums, int left, int right) {
    if (left == right) return nums[left];

    int mid = left + (right - left) / 2;

    int leftMax = maxSubArrayDivide(nums, left, mid);
    int rightMax = maxSubArrayDivide(nums, mid + 1, right);
    int crossMax = maxCrossingSum(nums, left, mid, right);

    return max({leftMax, rightMax, crossMax});
}

int maxSubArray(vector<int>& nums) {
    return maxSubArrayDivide(nums, 0, nums.size() - 1);
}

Time Complexity: O(nlogn) == Divide and merge at each level
Space Complexity: O(logn) == Recursion stack space


===================================================================================================== 

Retrun max sum and subarray using divide and conquer approach 

#include <iostream>
#include <vector>
#include <tuple>
#include <climits>
using namespace std;

tuple<int, int, int> maxCrossingSum(vector<int>& nums, int left, int mid, int right) {
    int leftSum = INT_MIN, rightSum = INT_MIN;
    int sum = 0;
    int maxLeft = mid, maxRight = mid + 1;

    // Scan left of mid
    for (int i = mid; i >= left; --i) {
        sum += nums[i];
        if (sum > leftSum) {
            leftSum = sum;
            maxLeft = i;
        }
    }

    sum = 0;
    // Scan right of mid
    for (int i = mid + 1; i <= right; ++i) {
        sum += nums[i];
        if (sum > rightSum) {
            rightSum = sum;
            maxRight = i;
        }
    }

    return {leftSum + rightSum, maxLeft, maxRight};
}

tuple<int, int, int> maxSubArrayDivide(vector<int>& nums, int left, int right) {
    if (left == right) {
        return {nums[left], left, right};
    }

    int mid = left + (right - left) / 2;

    auto [leftSum, leftStart, leftEnd] = maxSubArrayDivide(nums, left, mid);
    auto [rightSum, rightStart, rightEnd] = maxSubArrayDivide(nums, mid + 1, right);
    auto [crossSum, crossStart, crossEnd] = maxCrossingSum(nums, left, mid, right);

    if (leftSum >= rightSum && leftSum >= crossSum)
        return {leftSum, leftStart, leftEnd};
    else if (rightSum >= leftSum && rightSum >= crossSum)
        return {rightSum, rightStart, rightEnd};
    else
        return {crossSum, crossStart, crossEnd};
}

pair<int, vector<int>> maxSubArray(vector<int>& nums) {
    auto [maxSum, start, end] = maxSubArrayDivide(nums, 0, nums.size() - 1);
    vector<int> subarray(nums.begin() + start, nums.begin() + end + 1);
    return {maxSum, subarray};
}

