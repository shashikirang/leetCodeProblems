Given an integer array nums, find a subarray that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any subarray of nums is guaranteed to fit in a 32-bit integer.

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        if (nums.empty()) return 0;

        int maxProd = nums[0];
        int currMax = nums[0];
        int currMin = nums[0];

        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] < 0) swap(currMax, currMin);

            currMax = max(nums[i], currMax * nums[i]);
            currMin = min(nums[i], currMin * nums[i]);

            maxProd = max(maxProd, currMax);
        }

        return maxProd;
    }
};

Time   O(N)
Space  O(1)

======================================================================================== 

Return Max product and Subarray 


#include <iostream>
#include <vector>
#include <climits>
using namespace std;

pair<int, vector<int>> maxProductSubarray(vector<int>& nums) {
    if (nums.empty()) return {0, {}};

    int currMax = nums[0], currMin = nums[0], maxProd = nums[0];
    int start = 0, end = 0, tempStart = 0;

    for (int i = 1; i < nums.size(); ++i) {
        if (nums[i] < 0) {
            swap(currMax, currMin);
        }

        if (nums[i] > currMax * nums[i]) {
            currMax = nums[i];
            tempStart = i;
        } else {
            currMax = currMax * nums[i];
        }

        currMin = min(nums[i], currMin * nums[i]);

        if (currMax > maxProd) {
            maxProd = currMax;
            start = tempStart;
            end = i;
        }
    }

    vector<int> subarray(nums.begin() + start, nums.begin() + end + 1);
    return {maxProd, subarray};
}

Time O(N)
Space O(K) + O(1)
