Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.

The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
Output: 3
Explanation: The paths that sum to 8 are shown.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int pathSum(TreeNode* root, int targetSum) {
        if (!root) return 0;
        return countPathsFromNode(root, targetSum) +
               pathSum(root->left, targetSum) +
               pathSum(root->right, targetSum);
    }

private:
    int countPathsFromNode(TreeNode* node, long long sum) {
        if (!node) return 0;
        int count = 0;
        if (node->val == sum) count++;

        count += countPathsFromNode(node->left, sum - node->val);
        count += countPathsFromNode(node->right, sum - node->val);
        return count;
    }
};



Let n be the number of nodes in the binary tree.

For each node, countPathsFromNode explores all paths starting at that node, which can take up to O(n) time in the worst case (if the tree is skewed).

Since you're doing this for each node, the total time complexity becomes:

O(n^2)

Space complexity : 
Recursive stack: O(h), where h is the height of the tree

O(log n) for balanced

O(n) for skewed
