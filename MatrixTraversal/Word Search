Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
Example 2:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true
Example 3:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false


class Solution {
public:
    bool dfs(vector<vector<char>>& board, int i, int j, string& word, int index) {
        if (index == word.length()) return true; // Found the whole word

        int m = board.size();
        int n = board[0].size();

        // Boundary or character mismatch
        if (i < 0 || i >= m || j < 0 || j >= n || board[i][j] != word[index])
            return false;

        // Mark current cell as visited
        char temp = board[i][j];
        board[i][j] = '#'; // use a special marker

        // Explore all 4 directions
        bool found = dfs(board, i+1, j, word, index+1) ||
                     dfs(board, i-1, j, word, index+1) ||
                     dfs(board, i, j+1, word, index+1) ||
                     dfs(board, i, j-1, word, index+1);

        board[i][j] = temp; // backtrack (unmark)

        return found;
    }

    bool exist(vector<vector<char>>& board, string word) {
        int m = board.size();
        int n = board[0].size();

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                // Start DFS if first letter matches
                if (board[i][j] == word[0] && dfs(board, i, j, word, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
};


