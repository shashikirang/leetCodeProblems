Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

 

Example 1:


Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100



#include <iostream>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> paths;
        if (root) dfs(root, "", paths);
        return paths;
    }
    
private:
    void dfs(TreeNode* node, string path, vector<string>& paths) {
        path += to_string(node->val);
        
        // If it's a leaf node, add the path to the result
        if (!node->left && !node->right) {
            paths.push_back(path);
            return;
        }
        
        // If not a leaf, add "->" and continue DFS
        if (node->left) dfs(node->left, path + "->", paths);
        if (node->right) dfs(node->right, path + "->", paths);
    }
};

TIme complexity : O(N)
Space complexity : O(N)
