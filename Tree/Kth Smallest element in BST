Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

 

Example 1:


Input: root = [3,1,4,null,2], k = 1
Output: 1
Example 2:


Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3


#include <iostream>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
private:
    int count = 0;
    int result = -1;

    void inOrder(TreeNode* root, int k) {
        if (!root || count >= k) return;

        inOrder(root->left, k);

        count++;
        if (count == k) {
            result = root->val;
            return;
        }

        inOrder(root->right, k);
    }

public:
    int kthSmallest(TreeNode* root, int k) {
        count = 0;
        result = -1;
        inOrder(root, k);
        return result;
    }
};

Time complexity: O(log(k))
Space complexity: O(h)



Iterative approach using stack 

/**
 * Definition for a binary tree node.
 */
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;

    TreeNode() : val(0), left(nullptr), right(nullptr) {}

    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}

    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
    /**
     * Returns the k-th smallest element in a BST.
     * This is achieved by performing an in-order traversal iteratively.
     * In-order traversal of a BST yields the nodes in increasing order.
     * 
     * @param root A pointer to the root node of the BST.
     * @param k The index (1-indexed) of the smallest element to be found.
     * @return The value of the k-th smallest node.
     */
    int kthSmallest(TreeNode* root, int k) {
        // Initialize an empty stack that will be used to perform the in-order traversal.
        stack<TreeNode*> stk;

        // Continue traversing the tree until we have visited all nodes.
        while (root || !stk.empty()) {
            // Go left as long as there is a left child.
            if (root) {
                stk.push(root);      // Push the current node onto the stack before moving to left child.
                root = root->left;   // Move left.
            } else {
                // Process the nodes that do not have a left child anymore.
                root = stk.top();
                stk.pop();   // Remove the node from the stack.
                if (--k == 0) {
                    // If we have reached the k-th smallest, return its value.
                    return root->val;
                }
                // Move to the right child, which will be processed after all its left children.
                root = root->right;
            }
        }
        // If we are here, it means the k-th smallest element could not be found, return 0.
        // Although in valid BSTs with at least k nodes, the function will never reach here.
        return 0;
    }
};
