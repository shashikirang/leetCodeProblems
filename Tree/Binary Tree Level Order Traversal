Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []

#include <vector>
#include <queue>
#include <algorithm>

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
    // Function to perform a level-order traversal (bottom-up) of the tree.
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> result; // This will store the final level order traversal in reverse order.
      
        // If the root is nullptr, return the empty result vector.
        if (!root) return result;
      
        // Initialize a queue to hold the nodes of the tree.
        queue<TreeNode*> nodesQueue;
        nodesQueue.push(root);
      
        // Perform level-order traversal.
        while (!nodesQueue.empty()) {
            int levelSize = nodesQueue.size(); // Number of nodes at the current level.
            vector<int> currentLevel; // This will store node values at the current level.
          
            // Iterate over all nodes at the current level.
            for (int i = 0; i < levelSize; ++i) {
                TreeNode* currentNode = nodesQueue.front(); // Get the next node from the queue.
                nodesQueue.pop(); // Remove the node from the queue.
              
                currentLevel.push_back(currentNode->val); // Add the node's value to the current level's vector.
              
                // If the current node has a left child, add it to the queue for the next level.
                if (currentNode->left) nodesQueue.push(currentNode->left);
              
                // If the current node has a right child, add it to the queue for the next level.
                if (currentNode->right) nodesQueue.push(currentNode->right);
            }
          
            // After finishing the current level, add it to the result vector.
            result.push_back(currentLevel);
        }
      
        // Since we want to return the result in reverse order, we reverse the entire result vector.
        std::reverse(result.begin(), result.end());
      
        return result; // Return the final reversed level-order traversal.
    }
};

//Time complexity : O(N)
//SPace complexity: O(N)



Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).
Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []

#include <vector>
#include <queue>
#include <algorithm>

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
    // Function to perform a level-order traversal (bottom-up) of the tree.
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> result; // This will store the final level order traversal in reverse order.
      
        // If the root is nullptr, return the empty result vector.
        if (!root) return result;
      
        // Initialize a queue to hold the nodes of the tree.
        queue<TreeNode*> nodesQueue;
        nodesQueue.push(root);
      
        // Perform level-order traversal.
        while (!nodesQueue.empty()) {
            int levelSize = nodesQueue.size(); // Number of nodes at the current level.
            vector<int> currentLevel; // This will store node values at the current level.
          
            // Iterate over all nodes at the current level.
            for (int i = 0; i < levelSize; ++i) {
                TreeNode* currentNode = nodesQueue.front(); // Get the next node from the queue.
                nodesQueue.pop(); // Remove the node from the queue.
              
                currentLevel.push_back(currentNode->val); // Add the node's value to the current level's vector.
              
                // If the current node has a left child, add it to the queue for the next level.
                if (currentNode->left) nodesQueue.push(currentNode->left);
              
                // If the current node has a right child, add it to the queue for the next level.
                if (currentNode->right) nodesQueue.push(currentNode->right);
            }
          
            // After finishing the current level, add it to the result vector.
            result.push_back(currentLevel);
        }      
        return result; // Return the final reversed level-order traversal.
    }
};
